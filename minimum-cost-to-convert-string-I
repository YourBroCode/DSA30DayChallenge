// https://leetcode.com/problems/minimum-cost-to-convert-string-i/
class Solution {
private:
    void floydWarshall( vector<vector<int>> &dist) {
        for(int k = 0; k< 26;k++) {
            for(int i = 0; i <26;i++) {
                for(int j = 0; j<26;j++) {
                  if (dist[i][k] < INT_MAX && dist[k][j] < INT_MAX) {
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                    
                }
            }
        }

    }

public:
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {
        vector<vector<int>> distance(26,vector<int> (26,INT_MAX));
        
        for(int i = 0; i <original.size();i++) {
            distance[original[i]-'a'][changed[i]-'a'] = min(cost[i], distance[original[i]-'a'][changed[i]-'a']);
        }
        for(int i = 0; i< 26;i++) {
            for(int j = 0 ; j< 26;j++) {
                if(i==j) distance[i][j] = 0;
            }
        }
        long long ans = 0;
        floydWarshall(distance);
        for(int i = 0; i<source.size();i++){
            if(source[i]!= target[i]){
                if(distance[source[i]-'a'][target[i]-'a'] == INT_MAX) return -1;
                ans+=distance[source[i]-'a'][target[i]-'a'];
            }
            
        }


        return ans;

        
    }
};
